//采用LU_SGS方法计算DU = U(n + 1) - U(n)
void du_LU_SGS_2D(int nMesh, int mBlock, double alfa1)
{
	double alfa[7] = {0}, dui[7], duj[7];
	double DF[7] = {0};   //alfa, 对角线元素值;  dui, duj, DF对流通量
	const double w_LU = 1.e0;   //LU_SGS的松弛因子(1 - 2之间), 增大w_LU会提高稳定性，但会降低收敛速度
	alfa1;                 //双时间步LU_SGS附加对角线值
	Mesh_TYPE & MP = Mesh[nMesh];
	Block_TYPE & B = MP.Block[mBlock];        //第nMesh 重网格的第mBlock块
	int NV = MP.Nvar;
	int	nx = B.nx;  int ny = B.ny;

	//LU - SGS的两次扫描
	//----------------------------------
	//从i = 1, j = 1 到i = nx - 1, j = ny - 1的扫描过程(向上扫描过程)
	//扫描 i + j = plane 的平面
	//w_LU是松弛因子（1到2之间），增大w_LU会提高稳定性，但会降低收敛速度
	for (int plane = 2; plane <= nx + ny - 2; ++plane) {
		for (int j = 1; j <= ny - 1; ++j) {
			int i = plane - j;
			if (i<1 || i>nx - 1) { continue; }		//超出了这个平面

			//计算对接线元素 （如考虑粘性则再加上粘性谱半径； 对于湍流模型中的方程，则增加源项谱半径）
			for (int m = 0; m <= 6; ++m) {
				alfa[m] = B.vol[i][j] / B.dt[i][j] + w_LU*(B.Lci[i][j] + B.Lcj[i][j]) + B.vol[i][j] * alfa1;    //对角元
			}

			if (If_viscous == 1) {
				for (int m = 0; m <= 6; ++m) {
					alfa[m] += 2.e0*(B.Lvi[i][j] + B.Lvj[i][j]);       //加上粘性项
				}
			}
			
			if (NV == 5) {
				alfa[5] = alfa[5] + B.Lvi[i][j] + B.Lvj[i][j];       //SA模型
			}
			//else if (NV == 6) {			//SST模型
			//	alfa[5] = alfa[5] + 0.09*B.U[i+LAP][j + LAP][6] / B.U[i + LAP][j + LAP][1];
			//	alfa[6] = alfa[6] + 2.0*0.0828*B.U[i + LAP][j + LAP][6] / B.U[i + LAP][j + LAP][1];
			//}

			if (i != 1) {
				//通量的差量，用来近似计算A*W(See Blazek's book, page 208)
				//printf("DF[2]=%f\n", DF[2]);
				comput_DFn(NV, DF, B.U[i - 1 + LAP][j + LAP], B.dU[i - 1][j], B.ni1[i ][j], B.ni2[i ][j], gamma);
				//printf("DF[2]=%f\n", DF[2]); PAUSE;
				for (int inv = 1; inv <= NV; ++inv) {
					dui[inv] = 0.50*(DF[inv] * B.sj[i][j] + w_LU*B.Lci[i-1][j] * B.dU[i-1][j][inv]);
				}
				if (If_viscous == 1) {
					for (int inv = 1; inv <= NV; ++inv) {
						dui[inv] = dui[inv] + B.Lvi[i-1][j] * B.dU[i-1][j ][inv];  //! 2012-2-29, 稳定性更好些
					}
				}
			}
			else {
				for (int inv = 1; inv <= NV; ++inv) {
					dui[inv] = 0;
				}
			}

			if (j != 1) {
				//通量的差量，用来近似计算A*W(See Blazek's book, page 208)
				comput_DFn(NV, DF, B.U[i + LAP][j-1 + LAP], B.dU[i][j -1], B.nj1[i][j ], B.nj2[i][j], gamma);
				for (int inv = 1; inv <= NV; ++inv) {
					duj[inv] = 0.50*(DF[inv] * B.sj[i][j] + w_LU*B.Lcj[i][j - 1] * B.dU[i][j - 1][inv]);
				}
				if (If_viscous == 1) {
					for (int inv = 1; inv <= NV; ++inv) {
						duj[inv] = duj[inv]+B.Lvj[i][j-1]*B.dU[i][j-1][inv];
					}
				}
			}
			else {
				for (int inv = 1; inv <= NV; ++inv) {
					duj[inv] = 0;
				}
			}

			for (int m = 1; m <= NV; ++m) {
				B.dU[i][j][m] = (B.Res[i][j][m] + dui[m] + duj[m]) / alfa[m];
			}
		}
	}
	
	//----------------------------------------------------------
	//从(nx - 1, ny - 1)到(1, 1)的扫描过程 （向下扫描过程）
	//plane = i + j + k
	for (int plane = nx + ny - 2; plane >= 2; --plane) {
		for (int j = ny - 1; j >= 1; --j) {
				int i = plane - j;
				if (i<1 || i>nx - 1) { continue; }		/*超出了这个平面*/
				
				for (int m = 0; m <= 6; ++m) {
					alfa[m] = B.vol[i][j] / B.dt[i][j] + w_LU*(B.Lci[i][j] + B.Lcj[i][j]) + B.vol[i][j] * alfa1;    //对角元
				}
				if (If_viscous == 1) {
					for (int m = 0; m <= 6; ++m) {
						alfa[m] = alfa[m] + 2.e0*(B.Lvi[i][j] + B.Lvj[i][j]);       //加上粘性项
					}
				}

				if (NV == 5) {
					alfa[5] = alfa[5] + B.Lvi[i][j] + B.Lvj[i][j];       //SA模型
				}
				//else if (NV == 6) {			//SST模型
				//	alfa[5] = alfa[5] + 0.09*B.U[i+LAP][j + LAP][6] / B.U[i + LAP][j + LAP][1];
				//	alfa[6] = alfa[6] + 2.0*0.0828*B.U[i + LAP][j + LAP][6] / B.U[i + LAP][j + LAP][1];
				//}				
				if (i != nx-1) {
					//通量的差量，用来近似计算A*W(See Blazek's book, page 208)
					comput_DFn(NV, DF, B.U[i + 1 + LAP][j + LAP], B.dU[i + 1][j], B.ni1[i][j], B.ni2[i][j], gamma);
					for (int inv = 1; inv <= NV; ++inv) {
						dui[inv] = -0.50*(DF[inv] * B.sj[i+1][j] - w_LU*B.Lci[i + 1][j] * B.dU[i + 1][j][inv]);
					}
					if (If_viscous == 1) {
						for (int inv = 1; inv <= NV; ++inv) {
							dui[inv] = dui[inv] + B.Lvi[i + 1][j] * B.dU[i + 1][j][inv];  //! 2012-2-29, 稳定性更好些
						}
					}
				}
				else {
					for (int inv = 1; inv <= NV; ++inv) {
						dui[inv] = 0;
					}
				}

				if (j != ny-1 ) {
					//通量的差量，用来近似计算A*W(See Blazek's book, page 208)
					comput_DFn(NV, DF, B.U[i + LAP][j + 1 + LAP], B.dU[i][j + 1], B.nj1[i][j], B.nj2[i][j], gamma);
					for (int inv = 1; inv <= NV; ++inv) {
						duj[inv] = -0.50*(DF[inv] * B.sj[i][j+1] - w_LU*B.Lcj[i][j + 1] * B.dU[i][j + 1][inv]);
					}
					if (If_viscous == 1) {
						for (int inv = 1; inv <= NV; ++inv) {
							duj[inv] = duj[inv] + B.Lvj[i][j + 1] * B.dU[i][j + 1][inv];
						}
					}
				}
				else {
					for (int inv = 1; inv <= NV; ++inv) {
						duj[inv] = 0;
					}
				}

				for (int m = 1; m <= NV; ++m) {
					B.dU[i][j][m] = B.dU[i][j][m] + (dui[m] + duj[m]) / alfa[m];
				}
		}
	}
}